// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCSRFToken = `-- name: CreateCSRFToken :exec
INSERT INTO csrf_tokens(session_id, token, expires_at)
VALUES ($1, $2, $3)
`

type CreateCSRFTokenParams struct {
	SessionID string
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreateCSRFToken(ctx context.Context, arg CreateCSRFTokenParams) error {
	_, err := q.db.Exec(ctx, createCSRFToken, arg.SessionID, arg.Token, arg.ExpiresAt)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions(id, user_id, expires_at)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	ID        string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession, arg.ID, arg.UserID, arg.ExpiresAt)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getCSRFTokenBySession = `-- name: GetCSRFTokenBySession :one
SELECT session_id, token, expires_at from csrf_tokens WHERE session_id = $1
`

func (q *Queries) GetCSRFTokenBySession(ctx context.Context, sessionID string) (CsrfToken, error) {
	row := q.db.QueryRow(ctx, getCSRFTokenBySession, sessionID)
	var i CsrfToken
	err := row.Scan(&i.SessionID, &i.Token, &i.ExpiresAt)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const updateCSRFToken = `-- name: UpdateCSRFToken :exec
UPDATE csrf_tokens SET token = $1 WHERE session_id = $2
`

type UpdateCSRFTokenParams struct {
	Token     string
	SessionID string
}

func (q *Queries) UpdateCSRFToken(ctx context.Context, arg UpdateCSRFTokenParams) error {
	_, err := q.db.Exec(ctx, updateCSRFToken, arg.Token, arg.SessionID)
	return err
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions SET expires_at = $1 WHERE id = $2
`

type UpdateSessionExpiryParams struct {
	ExpiresAt time.Time
	ID        string
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpiry, arg.ExpiresAt, arg.ID)
	return err
}
