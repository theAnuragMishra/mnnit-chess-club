// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package database

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (white_id, black_id, white_username, black_username, fen)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateGameParams struct {
	WhiteID       *int32
	BlackID       *int32
	WhiteUsername string
	BlackUsername string
	Fen           string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (int32, error) {
	row := q.db.QueryRow(ctx, createGame,
		arg.WhiteID,
		arg.BlackID,
		arg.WhiteUsername,
		arg.BlackUsername,
		arg.Fen,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const endGameWithResult = `-- name: EndGameWithResult :exec
UPDATE games
SET result = $1, ended_at = NOW()
WHERE id = $2
`

type EndGameWithResultParams struct {
	Result string
	ID     int32
}

func (q *Queries) EndGameWithResult(ctx context.Context, arg EndGameWithResultParams) error {
	_, err := q.db.Exec(ctx, endGameWithResult, arg.Result, arg.ID)
	return err
}

const getGameInfo = `-- name: GetGameInfo :one
SELECT id, white_id, black_id, white_username, black_username, fen, result, created_at FROM games WHERE id = $1
`

func (q *Queries) GetGameInfo(ctx context.Context, id int32) (Game, error) {
	row := q.db.QueryRow(ctx, getGameInfo, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.WhiteID,
		&i.BlackID,
		&i.WhiteUsername,
		&i.BlackUsername,
		&i.Fen,
		&i.Result,
		&i.CreatedAt,
	)
	return i, err
}

const getGameMoves = `-- name: GetGameMoves :many
SELECT move_number, move_notation, move_fen
FROM moves
WHERE game_id = $1
ORDER BY move_number
`

type GetGameMovesRow struct {
	MoveNumber   int32
	MoveNotation string
	MoveFen      string
}

func (q *Queries) GetGameMoves(ctx context.Context, gameID int32) ([]GetGameMovesRow, error) {
	rows, err := q.db.Query(ctx, getGameMoves, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGameMovesRow
	for rows.Next() {
		var i GetGameMovesRow
		if err := rows.Scan(&i.MoveNumber, &i.MoveNotation, &i.MoveFen); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestMove = `-- name: GetLatestMove :one

SELECT move_number, move_notation, move_fen
FROM moves
WHERE game_id = $1
ORDER BY move_number DESC
LIMIT $1
`

type GetLatestMoveRow struct {
	MoveNumber   int32
	MoveNotation string
	MoveFen      string
}

// AND ended_at IS NOT NULL
// ORDER BY ended_at DESC;
func (q *Queries) GetLatestMove(ctx context.Context, limit int32) (GetLatestMoveRow, error) {
	row := q.db.QueryRow(ctx, getLatestMove, limit)
	var i GetLatestMoveRow
	err := row.Scan(&i.MoveNumber, &i.MoveNotation, &i.MoveFen)
	return i, err
}

const getOngoingGames = `-- name: GetOngoingGames :many
SELECT id, white_id, black_id, white_username, black_username, fen, result, created_at FROM games WHERE result = 'ongoing'
`

func (q *Queries) GetOngoingGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, getOngoingGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.WhiteID,
			&i.BlackID,
			&i.WhiteUsername,
			&i.BlackUsername,
			&i.Fen,
			&i.Result,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerGames = `-- name: GetPlayerGames :many
SELECT id, white_username, black_username, result
FROM games
WHERE (white_username = $1 OR black_username = $1)
`

type GetPlayerGamesRow struct {
	ID            int32
	WhiteUsername string
	BlackUsername string
	Result        string
}

func (q *Queries) GetPlayerGames(ctx context.Context, whiteUsername string) ([]GetPlayerGamesRow, error) {
	rows, err := q.db.Query(ctx, getPlayerGames, whiteUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlayerGamesRow
	for rows.Next() {
		var i GetPlayerGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.WhiteUsername,
			&i.BlackUsername,
			&i.Result,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMove = `-- name: InsertMove :exec
INSERT INTO moves (game_id, move_number, player_id, move_notation, move_fen)
VALUES ($1,$2, $3, $4, $5)
`

type InsertMoveParams struct {
	GameID       int32
	MoveNumber   int32
	PlayerID     *int32
	MoveNotation string
	MoveFen      string
}

func (q *Queries) InsertMove(ctx context.Context, arg InsertMoveParams) error {
	_, err := q.db.Exec(ctx, insertMove,
		arg.GameID,
		arg.MoveNumber,
		arg.PlayerID,
		arg.MoveNotation,
		arg.MoveFen,
	)
	return err
}

const updateGameFEN = `-- name: UpdateGameFEN :exec
UPDATE games
SET fen = $1
WHERE id = $2
`

type UpdateGameFENParams struct {
	Fen string
	ID  int32
}

func (q *Queries) UpdateGameFEN(ctx context.Context, arg UpdateGameFENParams) error {
	_, err := q.db.Exec(ctx, updateGameFEN, arg.Fen, arg.ID)
	return err
}
