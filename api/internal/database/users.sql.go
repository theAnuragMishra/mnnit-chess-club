// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(updated_at, email, avatar_url, google_id)
VALUES ($1, $2, $3, $4)
RETURNING id, email, created_at, updated_at, username, avatar_url, google_id, rating, rd, volatility
`

type CreateUserParams struct {
	UpdatedAt time.Time
	Email     string
	AvatarUrl *string
	GoogleID  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UpdatedAt,
		arg.Email,
		arg.AvatarUrl,
		arg.GoogleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.AvatarUrl,
		&i.GoogleID,
		&i.Rating,
		&i.Rd,
		&i.Volatility,
	)
	return i, err
}

const getRatingInfo = `-- name: GetRatingInfo :one
SELECT rating, rd, volatility FROM users WHERE id = $1
`

type GetRatingInfoRow struct {
	Rating     float64
	Rd         float64
	Volatility float64
}

func (q *Queries) GetRatingInfo(ctx context.Context, id int32) (GetRatingInfoRow, error) {
	row := q.db.QueryRow(ctx, getRatingInfo, id)
	var i GetRatingInfoRow
	err := row.Scan(&i.Rating, &i.Rd, &i.Volatility)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, created_at, updated_at, username, avatar_url, google_id, rating, rd, volatility FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.AvatarUrl,
		&i.GoogleID,
		&i.Rating,
		&i.Rd,
		&i.Volatility,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, email, created_at, updated_at, username, avatar_url, google_id, rating, rd, volatility FROM users WHERE id = $1
`

func (q *Queries) GetUserByUserID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.AvatarUrl,
		&i.GoogleID,
		&i.Rating,
		&i.Rd,
		&i.Volatility,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, created_at, updated_at, username, avatar_url, google_id, rating, rd, volatility FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.AvatarUrl,
		&i.GoogleID,
		&i.Rating,
		&i.Rd,
		&i.Volatility,
	)
	return i, err
}

const getUserPublicInfo = `-- name: GetUserPublicInfo :one
SELECT created_at, avatar_url, rating, rd FROM users WHERE username = $1
`

type GetUserPublicInfoRow struct {
	CreatedAt time.Time
	AvatarUrl *string
	Rating    float64
	Rd        float64
}

func (q *Queries) GetUserPublicInfo(ctx context.Context, username *string) (GetUserPublicInfoRow, error) {
	row := q.db.QueryRow(ctx, getUserPublicInfo, username)
	var i GetUserPublicInfoRow
	err := row.Scan(
		&i.CreatedAt,
		&i.AvatarUrl,
		&i.Rating,
		&i.Rd,
	)
	return i, err
}

const getUsernameAndRating = `-- name: GetUsernameAndRating :one
SELECT username, rating FROM users WHERE id = $1
`

type GetUsernameAndRatingRow struct {
	Username *string
	Rating   float64
}

func (q *Queries) GetUsernameAndRating(ctx context.Context, id int32) (GetUsernameAndRatingRow, error) {
	row := q.db.QueryRow(ctx, getUsernameAndRating, id)
	var i GetUsernameAndRatingRow
	err := row.Scan(&i.Username, &i.Rating)
	return i, err
}

const getUsernameByUserID = `-- name: GetUsernameByUserID :one
SELECT username FROM users WHERE id = $1
`

func (q *Queries) GetUsernameByUserID(ctx context.Context, id int32) (*string, error) {
	row := q.db.QueryRow(ctx, getUsernameByUserID, id)
	var username *string
	err := row.Scan(&username)
	return username, err
}

const updateRating = `-- name: UpdateRating :exec
UPDATE users SET rating = $1, rd = $2, volatility = $3 WHERE id = $4
`

type UpdateRatingParams struct {
	Rating     float64
	Rd         float64
	Volatility float64
	ID         int32
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.Exec(ctx, updateRating,
		arg.Rating,
		arg.Rd,
		arg.Volatility,
		arg.ID,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users SET avatar_url = $1, updated_at = $2 WHERE id = $3
`

type UpdateUserAvatarParams struct {
	AvatarUrl *string
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.AvatarUrl, arg.UpdatedAt, arg.ID)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE users SET username = $1 WHERE id = $2
`

type UpdateUsernameParams struct {
	Username *string
	ID       int32
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.Exec(ctx, updateUsername, arg.Username, arg.ID)
	return err
}
